@import "_palette.scss";

/**
 * theme-aware - Change color of a css property based on the currently active theme
 *
 * @param  {key}     CSS property
 * @param  {color}   Color name defined in the themes under _color-palette.scss
 *
 * @example - @include theme-aware('background', 'color-background');
 * @returns - background: #FFF;
 */
@mixin theme-aware($key, $color) {
    $default-data: map-get($themes, default);

    @each $theme-name, $theme-color in $themes {
        :global(.theme-#{$theme-name}) & {
            // $theme-data: value map for the theme
            $theme-data: map-get($themes, $theme-name);

            // $theme-value: value for the theme property
            $theme-value: map-get($theme-data, $color);
            // Uses default theme value if value not found in current theme
            @if (not map-has-key($themes, $color)) {
                $theme-value: map-get($default-data, $color);
            }

            #{$key}: $theme-value;
        }
    }
};

@mixin theme-aware-shadow($values, $color) {
    $default-data: map-get($themes, default);

	@each $theme-name, $theme-color in $themes {
		:global(.theme-#{$theme-name}) & {
            // $theme-data: value map for the theme
            $theme-data: map-get($themes, $theme-name);

            // $theme-value: value for the theme property
            $theme-value: map-get($theme-data, $color);
            // Uses default theme value if value not found in current theme
            @if (not map-has-key($themes, $color)) {
                $theme-value: map-get($default-data, $color);
            }

			-webkit-box-shadow: $values $theme-value;
			-moz-box-shadow: $values $theme-value;
			box-shadow: $values $theme-value;
        }
	}
};
